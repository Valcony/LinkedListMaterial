# -*- coding: utf-8 -*-
"""C14230230-pertemuan5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13oam-xoZAS0ismUwW6DgLPSkBhNRj-aO
"""

class Node():
  def __init__(self, val):
    self.data = val
    self.next = None

class Stack():
  def __init__(self):
    self.head = None

# Head plg atas
  def push(self, data):
    newNode = Node(data)
    if (self.head == None):
      self.head = newNode
    else:
      newNode.next = self.head
      self.head = newNode

  def pop(self):
    if self.head == None:
      return None
    else:
      popped = self.head.data
      self.head = self.head.next
      return popped


  def printStack(self):
    temp = self.head
    while temp:
      if temp.next != None:
        print(temp.data, end=", ")
      else:
        print(temp.data)
        break
      temp = temp.next

  def isEmpty(self):
    if self.head == None:
      return True
    else:
      return False

# Soal 1

def isBalance(stack):
    close = Stack()
    while not stack.isEmpty():
        char = stack.pop()
        if char == ")" or char == "]" or char == "}":
            close.push(char)
        elif char == "(" or char == "[" or char == "{":
            if close.isEmpty():
                return "Not Balanced"
            peek = close.pop()
            if not ((char == "(" and peek == ")") or (char == "[" and peek == "]") or (char == "{" and peek == "}")):
                return "Not Balanced"
    if close.isEmpty():
        return "Balanced"
    else:
        return "Not Balanced"


main = Stack()
input = "[(])"
for char in input:
    main.push(char)
isBalance(main)

# Soal 2

def sort(stack):
  temp = Stack()
  while not stack.isEmpty():
    curr = stack.pop()
    while not temp.isEmpty() and temp.head.data < curr:
      stack.push(temp.pop())
    temp.push(curr)
  return temp.printStack()

stack = Stack()
stack.push(3)
stack.push(5)
stack.push(1)
stack.push(4)
stack.push(2)
stack.push(8)
sort(stack)
stack.printStack()

# Soal 3

from collections import deque

def isOperator(char):
    return char in ["+", "-", "*", "/"]

def prefix(postfix):
    stack = deque()
    for char in postfix:
        if isOperator(char):
            op1 = stack.pop()
            op2 = stack.pop()
            prefix = char + op2 + op1
            stack.append(prefix)
        else:
          stack.append(char)
    return stack[-1]


postfix1 = "AB+CD-*"
postfix2 = "ABC/-AK/L-*"
prefix1 = prefix(postfix1)
prefix2 = prefix(postfix2)
print(f"Postfix: {postfix1} >> Prefix: {prefix1}")
print(f"Postfix: {postfix2} >> Prefix: {prefix2}")