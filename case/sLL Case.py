# -*- coding: utf-8 -*-
"""C14230230-pertemuan3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vmxfs02md3iyMO84PNJ8jW27XG4v5LrC
"""
# https://docs.google.com/document/d/1YVQYJVDl8oOvxIMC3XMjSKCRDaa1I39tOjkAbKA3ORo/edit?tab=t.0
class Node:
    def __init__(self, value):
        self.data = value
        self.next = None

class SingleLinked:
    def __init__(self):
        self.head = None


    def add(self, data):
      if (self.head == None):
        self.head = Node(data)
      else:
        temp = self.head
        while(temp.next != None):
          temp = temp.next
        temp.next = Node(data)


    def printSLL(self):
      if self.head == None:
        print("None")
      else:
        temp = self.head
        while temp.next != None:
          print(temp.data, "---> ", end="")
          temp = temp.next
        print(temp.data, "---> None")

    def delete(self):
      temp = self.head
      while temp.next.next != None:
        temp = temp.next
      temp.next = None

    def delFront(self):
        self.head = self.head.next

    def addFront(self, data):
            temp = self.head
            self.head = Node(data)
            self.head.next = temp

    # No 1
    def rev(self):
      temp = self.head
      tempSL = SingleLinked()
      if self.head == None:
        return None
      else:
        while temp.next:
          tempSL.addFront(temp.data)
          temp = temp.next
        tempSL.addFront(temp.data)
        self = tempSL

    # No 2 Ngubah front berdasarkan index
    def rotate(self, index):
      if index == 0:
        return
      temp = self.head
      count = 0
      while temp.next:
        if count+1 == index:
          tempNode = temp.next
          temp.next = None
          break
        temp = temp.next
        count += 1
      temp2 = tempNode
      while temp2.next:
        temp2 = temp2.next
      temp2.next = self.head
      self.head = tempNode

    # Swap elemen berpasangan
    def swap(self):
      if not self.head or not self.head.next:
        return
      prev = None
      temp = self.head
      self.head = temp.next
      while temp and temp.next:
          tempN = temp.next
          temp.next = tempN.next
          tempN.next = temp
          if prev:
              prev.next = tempN
          prev = temp
          temp = temp.next

# Soal 1 - function di class
list = SingleLinked()
list.add(1)
list.add(2)
list.add(3)
list.rev()
list.printSLL()

# Soal 2 - function di class

k = int(input("k: "))
list = SingleLinked()
list.add(1)
list.add(2)
list.add(3)
list.add(4)
list.add(5)
list.add(6)
list.rotate(k)
list.printSLL()

#  Soal 3
def slipIn(list1, list2):
      temp1 = list1.head
      temp2 = list2.head
      while temp1.next:
        tempN2 = temp2
        tempN1_next = temp1.next
        temp1.next = tempN2
        temp2 = temp2.next
        list2.delFront()
        tempN2.next = tempN1_next
        temp1 = tempN1_next
      tempN2 = temp2
      list2.delFront()
      tempN2.next = None
      temp1.next = tempN2



list1 = SingleLinked()
list1.add(1)
list1.add(2)
list1.add(3)

list2 = SingleLinked()
list2.add(4)
list2.add(5)
list2.add(6)
list2.add(7)
list2.add(8)

slipIn(list1, list2)
list1.printSLL()
list2.printSLL()

# Soal 4 - function di class

list = SingleLinked()
list.add(1)
list.add(2)
list.add(3)
list.swap()
list.printSLL()

# Soal 5 Merge 2 SLL n sort

def merge(list1, list2):
  if list1.head == None:
    return list2
  if list2.head == None:
    return list1
  temp1 = list1.head
  temp2 = list2.head
  tempSLL = SingleLinked()
  while temp1.next and temp2.next:
      if (temp1.data <= temp2.data):
        tempSLL.add(temp1.data)
        temp1 = temp1.next
      elif (temp2.data < temp1.data):
        tempSLL.add(temp2.data)
        temp2 = temp2.next
  while temp1:
    tempSLL.add(temp1.data)
    temp1 = temp1.next
  while temp2:
    tempSLL.add(temp2.data)
    temp2 = temp2.next
  return tempSLL


list1 = SingleLinked()
list1.add(5)
list1.add(10)
list1.add(15)

list2 = SingleLinked()
list2.add(2)
list2.add(3)
list2.add(20)


list3 = merge(list1, list2)
list3.printSLL()
